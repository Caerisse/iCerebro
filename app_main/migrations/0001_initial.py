# Generated by Django 3.1 on 2020-08-13 14:13

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FollowRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'follow_relations',
            },
        ),
        migrations.CreateModel(
            name='InstaUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_checked', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('followers_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('following_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('posts_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('following', models.ManyToManyField(related_name='followers', through='app_main.FollowRelation', to='app_main.InstaUser')),
            ],
            options={
                'verbose_name': 'instauser',
                'verbose_name_plural': 'instausers',
                'db_table': 'insta_users',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_posted', models.DateTimeField()),
                ('link', models.CharField(max_length=500, unique=True)),
                ('src', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=500), blank=True, null=True, size=None)),
                ('caption', models.TextField(blank=True)),
                ('likes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('ig_desciption', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('objects_detected', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('classified_as', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('instauser', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='app_main.instauser')),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='ICerebroUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_type', models.TextField(blank=True, null=True)),
                ('subscription_end', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'icerebrouser',
                'verbose_name_plural': 'icerebrousers',
                'db_table': 'icerebro_users',
            },
        ),
        migrations.AddField(
            model_name='followrelation',
            name='followed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_relations_is_followed', to='app_main.instauser'),
        ),
        migrations.AddField(
            model_name='followrelation',
            name='follower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_relations_is_follower', to='app_main.instauser'),
        ),
        migrations.CreateModel(
            name='BotScheduledPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('images_links', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), size=None)),
                ('caption', models.TextField(blank=True)),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_posts', to='app_main.instauser')),
            ],
            options={
                'db_table': 'bot_scheduled_post',
            },
        ),
        migrations.AlterUniqueTogether(
            name='followrelation',
            unique_together={('follower', 'followed')},
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_posted', models.DateTimeField()),
                ('text', models.TextField(blank=True)),
                ('instauser', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to='app_main.instauser')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', to='app_main.post')),
            ],
            options={
                'db_table': 'comments',
                'unique_together': {('date_posted', 'instauser', 'post')},
            },
        ),
        migrations.CreateModel(
            name='BotSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('password', models.TextField()),
                ('page_delay', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('use_proxy', models.BooleanField(default=False)),
                ('proxy_address', models.TextField(blank=True)),
                ('proxy_port', models.TextField(blank=True)),
                ('disable_image_load', models.BooleanField(default=True)),
                ('want_check_browser', models.BooleanField(default=False)),
                ('bypass_security_challenge_using', models.IntegerField(choices=[(1, 'EMAIL'), (2, 'SMS')], default=1)),
                ('dont_include', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('blacklist_campaign', models.TextField(blank=True)),
                ('white_list', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('follow_times', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('share_times', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('comment_times', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('do_follow', models.BooleanField(default=False)),
                ('follow_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('do_like', models.BooleanField(default=False)),
                ('like_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('do_story', models.BooleanField(default=False)),
                ('story_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('story_simulate', models.BooleanField(default=False)),
                ('do_comment', models.BooleanField(default=False)),
                ('comment_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comments', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('photo_comments', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('video_comments', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('do_reply_to_comments', models.BooleanField(default=False)),
                ('reply_to_comments_percent', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comment_replies', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('photo_comment_replies', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('video_comment_replies', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('hashtags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('location_hashtags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('similar_accounts', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('dont_like', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('mandatory_words', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('ignore_if_contains', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('ignore_users', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True), blank=True, null=True, size=None)),
                ('user_interact_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('user_interact_amount', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(0)])),
                ('user_interact_media', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'PHOTO'), (2, 'CAROUSEL'), (3, 'VIDEO')], default='1,2,3', max_length=5, null=True)),
                ('user_interact_random', models.BooleanField(default=False)),
                ('delimit_liking', models.BooleanField(default=False)),
                ('max_likes', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_likes', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('delimit_by_numbers', models.BooleanField(default=False)),
                ('potency_ratio', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_followers', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_following', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_followers', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_following', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_posts', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_posts', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('skip_business', models.BooleanField(default=False)),
                ('skip_business_categories', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Advertising Agency'), (2, 'Advertising/Marketing'), (3, 'Art'), (4, 'Art Gallery'), (5, 'Art Museum'), (6, 'Artist'), (7, 'Arts & Entertainment'), (8, 'Arts & Humanities Website'), (9, 'Athlete'), (10, 'Auto Dealers'), (11, 'Business & Utility Services'), (12, 'Clothing Store'), (13, 'Community'), (14, 'Community Organization'), (15, 'Company'), (16, 'Consulting Agency'), (17, 'Content & Apps'), (18, 'Creators & Celebrities'), (19, 'Education'), (20, 'Food & Personal Goods'), (21, 'General Interest'), (22, 'Graphic Designer'), (23, 'Home Goods Stores'), (24, 'Home Services'), (25, 'Jewelry/Watches'), (26, 'Lifestyle Services'), (27, 'Local Business'), (28, 'Local Events'), (29, 'Management Service'), (30, 'Media/News Company'), (31, 'Non-Profits & Religious Organizations'), (32, 'Party Entertainment Service'), (33, 'Personal Goods & General Merchandise Stores'), (34, 'Photographer'), (35, 'Photography Videography'), (36, 'Product/Service'), (37, 'Professional Service'), (38, 'Professional Sports Team'), (39, 'Public Figure'), (40, 'Public Relations Agency'), (41, 'Publishers'), (42, 'Restaurants'), (43, 'Ski Resort'), (44, 'Sport'), (45, 'Sports & Recreation'), (46, 'Transportation & Accomodation Services'), (47, 'Travel Agency'), (48, 'Wine/Spirits')], max_length=134, null=True)),
                ('dont_skip_business_categories', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Advertising Agency'), (2, 'Advertising/Marketing'), (3, 'Art'), (4, 'Art Gallery'), (5, 'Art Museum'), (6, 'Artist'), (7, 'Arts & Entertainment'), (8, 'Arts & Humanities Website'), (9, 'Athlete'), (10, 'Auto Dealers'), (11, 'Business & Utility Services'), (12, 'Clothing Store'), (13, 'Community'), (14, 'Community Organization'), (15, 'Company'), (16, 'Consulting Agency'), (17, 'Content & Apps'), (18, 'Creators & Celebrities'), (19, 'Education'), (20, 'Food & Personal Goods'), (21, 'General Interest'), (22, 'Graphic Designer'), (23, 'Home Goods Stores'), (24, 'Home Services'), (25, 'Jewelry/Watches'), (26, 'Lifestyle Services'), (27, 'Local Business'), (28, 'Local Events'), (29, 'Management Service'), (30, 'Media/News Company'), (31, 'Non-Profits & Religious Organizations'), (32, 'Party Entertainment Service'), (33, 'Personal Goods & General Merchandise Stores'), (34, 'Photographer'), (35, 'Photography Videography'), (36, 'Product/Service'), (37, 'Professional Service'), (38, 'Professional Sports Team'), (39, 'Public Figure'), (40, 'Public Relations Agency'), (41, 'Publishers'), (42, 'Restaurants'), (43, 'Ski Resort'), (44, 'Sport'), (45, 'Sports & Recreation'), (46, 'Transportation & Accomodation Services'), (47, 'Travel Agency'), (48, 'Wine/Spirits')], max_length=134, null=True)),
                ('skip_non_business', models.BooleanField(default=False)),
                ('skip_no_profile_pic', models.BooleanField(default=True)),
                ('skip_private', models.BooleanField(default=True)),
                ('skip_business_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('skip_no_profile_pic_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('skip_private_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mandatory_language', models.BooleanField(default=False)),
                ('mandatory_character', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'LATIN'), (2, 'GREEK'), (3, 'CYRILLIC'), (4, 'ARABIC'), (5, 'HEBREW'), (6, 'CJK'), (7, 'HANGUL'), (8, 'HIRAGANA'), (9, 'KATAKANA'), (10, 'THAI'), (11, 'MATHEMATICAL')], max_length=23, null=True)),
                ('use_image_analysis', models.BooleanField(default=False)),
                ('action_delays_enabled', models.BooleanField(default=True)),
                ('action_delays_like', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(1)])),
                ('action_delays_comment', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(1)])),
                ('action_delays_follow', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1)])),
                ('action_delays_unfollow', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(1)])),
                ('action_delays_story', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1)])),
                ('action_delays_randomize', models.BooleanField(default=True)),
                ('action_delays_random_range_from', models.FloatField(default=0.75, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1)])),
                ('action_delays_random_range_to', models.FloatField(default=1.25, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('qs_sleep_after', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'like'), (2, 'comment'), (3, 'follow'), (4, 'unfollow'), (5, 'server_call')], max_length=9, null=True)),
                ('qs_randomize_sleep_time', models.BooleanField(default=True)),
                ('qs_max_extra_sleep_minutes', models.IntegerField(blank=True, default=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_server_calls_hourly', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_server_calls_daily', models.IntegerField(blank=True, default=4700, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_likes_hourly', models.IntegerField(blank=True, default=57, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_likes_daily', models.IntegerField(blank=True, default=585, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_comments_hourly', models.IntegerField(blank=True, default=21, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_comments_daily', models.IntegerField(blank=True, default=182, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_follows_hourly', models.IntegerField(blank=True, default=48, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_follows_daily', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_unfollows_hourly', models.IntegerField(blank=True, default=35, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_unfollows_daily', models.IntegerField(blank=True, default=402, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_story_hourly', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_peak_story_daily', models.IntegerField(blank=True, default=4700, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('qs_randomize_peak_number', models.BooleanField(blank=True, default=True, null=True)),
                ('qs_random_range_from', models.FloatField(blank=True, default=0.75, null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(1)])),
                ('qs_random_range_to', models.FloatField(blank=True, default=1.25, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('icerebrouser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_settings', to='app_main.icerebrouser')),
                ('instauser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_settings', to='app_main.instauser')),
            ],
            options={
                'db_table': 'bot_settings',
                'unique_together': {('instauser', 'name')},
            },
        ),
        migrations.CreateModel(
            name='BotFollowed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('date', models.DateTimeField(auto_now=True)),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot', to='app_main.instauser')),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed', to='app_main.instauser')),
            ],
            options={
                'db_table': 'bot_followed',
                'unique_together': {('bot', 'followed')},
            },
        ),
        migrations.CreateModel(
            name='BotCookies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('cookie_name', models.TextField()),
                ('cookie_value', models.TextField()),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cookies', to='app_main.instauser')),
            ],
            options={
                'db_table': 'cookies',
                'unique_together': {('bot', 'cookie_name')},
            },
        ),
        migrations.CreateModel(
            name='BotBlacklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('campaign', models.TextField()),
                ('action', models.TextField()),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blacklist', to='app_main.instauser')),
                ('instauser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blacklisted', to='app_main.instauser')),
            ],
            options={
                'db_table': 'bot_blacklists',
                'unique_together': {('bot', 'instauser', 'campaign', 'action')},
            },
        ),
    ]
